apiVersion: batch/v1
kind: Job
metadata:
  name: geth-genesis
  namespace: {{ .Release.Namespace }}
spec:
  template:
    spec:
      serviceAccountName: kubectl-sa
      initContainers:
      - name: geth-remove-db
        image: "{{ .Values.image.gethRemoveDb }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command: ["rm", "-rf", "/execution/geth"]
        volumeMounts:
        - name: execution
          mountPath: {{ .Values.volumes.execution }}
      - name: wait-for-create-beacon-chain-genesis
        image: "{{ .Values.image.kubectlImage }}"  # This image includes kubectl and can be used to run wait commands
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command:
          - /bin/sh
          - -c
          - |
            echo "Waiting for create-beacon-chain-genesis Job to complete..."
            until kubectl get job create-beacon-chain-genesis -n {{ .Release.Namespace }} -o jsonpath='{.status.succeeded}' | grep "1"; do
              echo "Job not completed yet. Checking again in 10 seconds..."
              sleep 10
            done
            echo "create-beacon-chain-genesis Job completed successfully."
      containers:
      - name: geth-genesis
        image: "{{ .Values.image.gethGenesis }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command: ["geth", "--datadir={{ .Values.volumes.execution }}", "init", "{{ .Values.volumes.execution }}/genesis.json"]
        volumeMounts:
        - name: execution
          mountPath: {{ .Values.volumes.execution }}
        - name: genesis-config-volume
          mountPath: {{ .Values.volumes.execution }}/genesis.json
          subPath: genesis.json
        env:
        - name: GETH_PORT
          value: "8545"

      restartPolicy: OnFailure
      volumes:
      - name: execution
        hostPath:
          path: {{ .Values.volumes.localexecution }}
      - name: genesis-config-volume
        configMap:
          name: genesis-config
      nodeSelector:
        kubernetes.io/arch: amd64 

  backoffLimit: 4